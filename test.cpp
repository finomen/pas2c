#include "pascal.h" 
/**
 * Autogenerated from program_name
 */
/**
 * Constants
 */
#define a "hello"
#define b 5
#define c a
#define d a + c
#define e a * b
#define f pow(a, b)
#define g f
#define complex pow(a + 6, a + 4 * 7)
#define k .7
#define l 2
/**
 * Types
 */
typedef char domain;
typedef domain* pointer;
typedef domain alias;
typedef enum {one, two, three} enumt;
typedef pascal_subrange<-5, 6> subrange;
typedef pascal_subrange<'A', 'Z'> subrange1;
typedef pascal_array<pointer, pascal_subrange<1, 10> > array1;
typedef pascal_array<enumt, pascal_subrange<1, 10>, subrange > array2;
/**
 * Variables
 */
integer ia, ib, ic;
pascal_array<char, pascal_subrange<1, 10>, pascal_subrange<20, 30> > a1, b1, c1;
/**
 * Functions
 */
void foo();/* EXTERNAL */
void foo(integer ia);/* FORWARD */
real foo1();/* FORWARD */
void bar1(integer x, integer y, string s);/* FORWARD */
void bar2(integer& x, integer& y, string s);/* FORWARD */
real bar3(integer x, integer y, string s);/* EXTERNAL */
real bar4(integer& x, integer& y, string s);/* EXTERNAL */
real bar2(integer x, integer y, string s) {
{
foo(5);

}

}
real foo1() {
{
foo(5);

}

}
void foo(integer ia) {
{
foo(5);

}

}
void foo() {
{
foo(5);

}

}
void pascal_main() {
ia = b;
ia = a1[boost::make_tuple(1)];
ib = ia + b;
ic = pow(ia, b);
ia = ia * ib;
ia = ia / k;
ia = ia && b;
ia = ia || b;
ia = !b;
if (ia == ib) foo();
if (ia == ib) foo(); else foo1();
ia = ib;
for (ia = b; ia <= b; --ia)
foo();
while (ia == b) foo();
ia = b;
do {
foo();
} while (foo1);
while (foo1) {
foo();

}
;

}


 int main() {
pascal_main();
return 0;
}
